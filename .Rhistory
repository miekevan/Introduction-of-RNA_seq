knitr::opts_chunk$set(echo = TRUE)
getwd()
infection.targets<-read.delim("./data/fileDesc.txt")
infection.targets
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
infection.targets
infection <- readDGE(Coinfection.targets, header=F)
library(edgeR)
options(digits=3)
infection <- readDGE(Coinfection.targets, header=F)
infection <- readDGE(infection.targets, header=F)
dim(infection)
head(infection)
infection.rawCount <- infection$count
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
infection.filtered <- rowSums(cpm(infection)>1) >=3
table(infection.filtered)
infection$samples$lib.size
Infection <- infection[infection.filtered,]
colSums(Infection$counts)
dim(Infection)
Infection$samples$lib.size <- colSums(Infection$counts)
Infection$samples
Infection = calcNormFactors(Infection)
Infection$samples
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
png("./results/plotMDS.Infection.png", res=300, height=1800, width=1800)
plotMDS(Infection, main="MDS plot of Infection RNA-Seq", labels=colnames(Infection$counts))
dev.off()
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
Infection.fit <- glmFit(Infection, Coinfection.design)
Infection.fit <- glmFit(Infection, Infection.design)
colnames(Infection.fit)
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)  # to compare Ha vs Ctr (Ha_vs_Ctr)
t1<-topTags(lrt.Ha_vs_Ctr, n=nrow(Infection))
head(t1$table)
summary(decideTestsDGE(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
summary(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=463)$table,  logFC > 1))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=463)$table,  logFC < -1))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=123)$table,  logFC < -1))
setwd("E:/lessons/RNA_seq/rnaSeqTutorial")
library(limma)
library(edgeR)
library(RColorBrewer)
library(wordcloud)
## show me
options(digits=3)
tZone.targets<-read.delim("./fileDesc.txt")
View(tZone.targets)
rownames(tZone.targets)<-c("T1.TZ","T2.TZ","T3.TZ","T4.TZ","T1.SW","T2.SW","T3.SW","T4.SW")
tZone.orig <- readDGE(tZone.targets, head = F)
tZone.orig
tZone <- tZone.orig
dim(tZone)
## show me how many counts on each sample
tZone.rawCount <- tZone$count
colnames(tZone.rawCount)
head(tZone.rawCount)
## successfully changed the colname.
tZone.norm_allCPM <- cpm(calcNormFactors(tZone))
head(tZone.norm_allCPM)
##Filter transcripts that less than 8 CPM in at least 4 libraries
tZone$samples
tZone.keep8 = rowSums(cpm(tZone)>8) >= 4
## Libraries size of data after filtering
table(tZone.keep8)
##tZone.keep8
##FALSE  TRUE
##64965 11361
##check the library size
tZone$samples$lib.size
## cover the original file with our filter data
tZone = tZone[tZone.keep8,]
colSums(tZone$counts)
dim(tZone)
##Update the filtered libraries size
tZone$samples$lib.size = colSums(tZone$counts)
tZone$samples
##Performed normalisation with TMM method
tZone = calcNormFactors(tZone)
##The libraries size after normalisation
tZone$samples
# Area factor
area = factor(tZone$samples$area)
# Location factor
location = factor(tZone$samples$family)
tZone
# Describe the experiment setup
tZone.design = model.matrix(~area)
tZone.design
## note: the rowname of tZone changed to 1,2...,7,8
colnames(tZone$counts)
# Describe the experiment setup
tZone.design = model.matrix(~area)
tZone.design
##to see if some samples are outliner.
plotMDS(tZone, main='MDS plot of TZSM RNA-Seq', lables=colnames(tZone$counts))
##Export the MDS plot to a PNG file, 300dpi is required of standerds for many journals.
png("./plotMDS.tZoneRNAseq.png", res=300, height=1800, width=1800)
plotMDS(tZone, main="MDS plot of TZSW RNA-Seq", labels=colnames(tZone$counts))
dev.off()
##Estimating the common dispersion
tZone <- estimateGLMCommonDisp(tZone, tZone.design)
##Estimating the trended dispersion
tZone <- estimateGLMTrendedDisp(tZone, tZone.design)
##Estimating the tagwwise dispersion
tZone <- estimateGLMTagwiseDisp(tZone, tZone.design, prior.df=20)
tZone
## Fit DGEList and design matrix to genewise GLM
tZone.fit = glmFit(tZone, tZone.design)
colnames(tZone.fit)
tZone.lrtTZvsSW = glmLRT(tZone.fit)
topTags(tZone.lrtTZvsSW, n = 20L)
#Differentially expressed (DE) transcripts in transition zone vs sapwood at FDR < 0.05
summary(decideTestsDGE(tZone.lrtTZvsSW, adjust.method="BH", p.value=0.05))
#Differentially expressed (DE) transcripts in transition zone vs sapwood at FDR < 0.05
summary(decideTests(tZone.lrtTZvsSW, adjust.method="BH", p.value=0.05))
# The UP-regulated transcripts
nrow(subset(topTags(tZone.lrtTZvsSW, n=1673)$table, logFC > 0))
tZone.lrtTZvsSW.UP <- subset(topTags(tZone.lrtTZvsSW, n=1673)$table, logFC > 0)
#The down-regulated transcripts, the number of the genes and their transcripts
nrow(subset(topTags(tZone.lrtTZvsSW, n=1673)$table, logFC < 0))
tZone.lrtTZvsSW.DW <- subset(topTags(tZone.lrtTZvsSW, n=1673)$table, logFC < 0)
View(tZone.lrtTZvsSW.DW)
# Differentially expressed transcripts' tag
tZone.DEtags.lrtTZvsSW <- rownames(tZone)[as.logical(decideTests(tZone.lrtTZvsSW, adjust.method="BH", p.value=0.05))]
# Export list of differentially expressed transcripts
write.table(topTags(tZone.lrtTZvsSW, n=1673), file="./tZone.lrtTZvsSW.DElist.txt", sep="\t", quote=F)
# Export list of UP-regulated transcripts
write.table(tZone.lrtTZvsSW.UP, file="./tZone.lrtTZvsSW.UP.DElist.txt", sep="\t", quote=F)
# Export list of DW-regulated transcripts
write.table(tZone.lrtTZvsSW.DW, file="./tZone.lrtTZvsSW.DW.DElist.txt", sep="\t", quote=F)
###############################
## Visualisation: Smear plot ##
###############################
## ask all the genes label as grey color
tZone.colTZvsSW = rep('grey55', nrow(tZone))
# Assign colour for DE transcripts
tZone.colTZvsSW[tZone.lrtTZvsSW$table$PValue < 0.05 & tZone.lrtTZvsSW$table$logFC >0 ] <- "red"
tZone.colTZvsSW[tZone.lrtTZvsSW$table$PValue < 0.05 & tZone.lrtTZvsSW$table$logFC <0 ] <- "blue"
# Plot Smear plot with adjustment on Y-axis label
plotSmear(tZone.lrtTZvsSW, de.tags=tZone.DEtags.lrtTZvsSW, xlab="log-counts per million (logCPM)", ylab="log-fold change (logFC)", main="Transition zone compare to Sapwood", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
# Plot Smear plot with adjustment on Y-axis label and colour of DE tags changed
plotSmear(tZone.lrtTZvsSW, xlab="log-counts per million (logCPM)", ylab="log-fold change (logFC)", main="Transition zone compared to sapwood", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=tZone.colTZvsSW, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
png("./plotSmear2.tZoneRNAseq.png", res=300, height=1800, width=1800)
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(tZone.lrtTZvsSW, xlab="log-counts per million (logCPM)", ylab="log-fold change (logFC)", main="Transition zone compared to sapwood", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=tZone.colTZvsSW, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
dev.off()
# Load the UP-regulated fold change counts data frame
tZ.UP.wordCloud <- read.delim("./tZone.UP.FCfrequency.txt", header=T)
setwd("C:/Users/username/Desktop/RNA-seq_DEA")
setwd("C:/Users/timoi/OneDrive - University of Helsinki/ZilanWen Github/RNA-seq_Differential-Gene-Expression-Analysis")
library(edgeR)
options(digits=3)
infection.targets<-read.delim("./data/fileDesc.txt")
infection.targets
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
infection.targets
infection <- readDGE(infection.targets, header=F)
dim(infection)
head(infection)
infection.rawCount <- infection$count
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
infection.filtered <- rowSums(cpm(infection)>1) >=3
table(infection.filtered)
infection$samples$lib.size
Infection <- infection[infection.filtered,]
colSums(Infection$counts)
dim(Infection)
Infection$samples$lib.size <- colSums(Infection$counts)
Infection$samples
Infection = calcNormFactors(Infection)
Infection$samples
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
Infection.fit <- glmFit(Infection, Infection.design)
colnames(Infection.fit)
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)  # to compare Ha vs Ctr (Ha_vs_Ctr)
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)  # to compare Ha vs Ctr (Ha_vs_Ctr)
t1<-topTags(lrt.Ha_vs_Ctr, n=nrow(Infection))
head(t1$table)
summary(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC > 0))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC < -1))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC < 0))
write.csv(lrt.Ha_vs_Ctr_UP, file="./results/lrt.Ha_vs_Ctr_UP.csv")
lrt.Ha_vs_Ctr_UP <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC > 0)
lrt.Ha_vs_Ctr_DW <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC < 0)
write.csv(lrt.Ha_vs_Ctr_UP, file="./results/lrt.Ha_vs_Ctr_UP.csv")
write.csv(lrt.Ha_vs_Ctr_DW, file="./results/lrt.Ha_vs_Ctr_DW.csv")
Infection.colHavsCtr = rep('grey55', nrow(Infection))
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC >0 ] <- "red"
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC <0 ] <- "blue"
png("./plotSmear.InfectionRNAseq.png", res=300, height=1800, width=1800)
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=lrt.Ha_vs_Ctr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
dev.off()
DEtags.lrt.Ha_vs_Ctr <- rownames(Infection)[as.logical(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))]
png("./results/plotSmear.InfectionRNAseq.png", res=300, height=1800, width=1800)
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
dev.off()
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, de.tags=DEtags.lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log-fold change (logFC)", main="Ha infection compared to Control", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="a infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
knitr::opts_chunk$set(echo = TRUE)
head(infection.rawCount)
install.packages("ggplot2")
library(ggplot2)
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
png("./results/count distribution.png", res=300, height=1800, width=1800)
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
dev.off()
plotPCA(rld, intgroup="sampletype")
